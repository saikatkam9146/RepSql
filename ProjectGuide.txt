# Angular ReportingSchedulerWeb Project: Step-by-Step Guide

This document explains how the ReportingSchedulerWeb Angular project was created, including setup, component creation, routing, and page structure. It is designed for beginners.

---

## 1. Project Setup

- **Angular CLI Installation:**
  - Install Node.js (https://nodejs.org/)
  - Install Angular CLI: `npm install -g @angular/cli`
- **Create Project:**
  - Run: `ng new ReportingSchedulerWeb --standalone --routing --style=scss`
  - Choose SCSS for styling and enable routing.
- **Navigate to Project Folder:**
  - `cd ReportingSchedulerWeb`

---

## 2. Main Structure

- **Root Files:**
  - `app.component.ts` and `app.component.html`: Main entry point, contains `<app-navbar>` and `<router-outlet>`.
  - `app.routes.ts`: Defines all routes for navigation.
  - `navbar.component.ts/.html/.scss`: Navigation bar for switching between pages.

---

## 3. Creating Components

### Users Component
- **Generate:**
  - `ng generate component components/users --standalone`
- **Purpose:**
  - Displays a table of users.
  - Allows navigation to create, edit, and details pages.
- **Files:**
  - `users.component.ts`: Logic and data for users.
  - `users.component.html`: Table and buttons for actions.
  - `users.component.scss`: Styling for the table.

### Databases Component
- **Generate:**
  - `ng generate component components/databases --standalone`
- **Purpose:**
  - Displays a table of databases.
  - Allows navigation to create, edit, and details pages.

### Other Components
- **Create/Edit/Details Pages:**
  - For both users and databases, separate components were created for creating, editing, and viewing details.
  - Example: `create-user`, `edit-user`, `user-details`, `create-database`, `edit-database`, `database-details`.
  - Each has its own `.ts`, `.html`, and `.scss` files.

---

## 4. Routing

- **app.routes.ts:**
  - Defines all routes for navigation.
  - Example routes:
    - `/users` → UsersComponent
    - `/databases` → DatabasesComponent
    - `/create-user` → CreateUserComponent
    - `/edit-user/:id` → EditUserComponent
    - `/user-details/:id` → UserDetailsComponent
    - Similar routes for databases
- **Navigation:**
  - Use Angular's `Router` to navigate between pages.
  - Example: `this.router.navigate(['/edit-user', userId]);`

---

## 5. UI and Styling

- **Navbar:**
  - Green color, reduced width, links to all main pages.
- **Tables:**
  - Green headers, formal look.
- **Forms:**
  - Two-column layout for create/edit pages.
  - Save and Cancel buttons for actions.

---

## 6. Data Handling (Demo)

- **Mock Data:**
  - Users and databases are stored in arrays for demonstration.
  - Create/Edit pages update these arrays.
- **API Integration:**
  - In a real app, you would use Angular services and HTTP calls to connect to a backend.

---

## 7. How Pages Work Together

- **Navbar links** switch between main tabs (Reports, Users, Databases).
- **Tables** show lists of users/databases.
- **Plus button** navigates to create page.
- **Edit/Details buttons** navigate to edit/details pages.
- **Routing** ensures only one navbar is shown per page.

---

## 8. Useful Angular Concepts

- **Standalone Components:**
  - No need for NgModules, easier structure.
- **Routing:**
  - Use `RouterModule` and `Routes` array.
- **Forms:**
  - Use `FormsModule` for template-driven forms.
- **SCSS Styling:**
  - Use `.scss` files for component styles.

---

## 9. Next Steps for Beginners

- Try editing a component and see changes live.
- Add new fields to forms and update the logic.
- Learn about Angular services for real API calls.
- Explore Angular documentation: https://angular.io/docs

---

## 10. Troubleshooting

- If you see errors, check the terminal output for details.
- Make sure all components are imported and routed correctly.
- Use explicit types for TypeScript errors (e.g., `(u: any)` in array methods).

---

This document is safe to keep in your project folder and will not affect your Angular app execution.
